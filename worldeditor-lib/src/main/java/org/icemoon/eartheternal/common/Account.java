package org.icemoon.eartheternal.common;

import java.io.IOException;
import java.io.PrintWriter;
import java.security.MessageDigest;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.Formatter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.StringTokenizer;

import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang.StringUtils;

@SuppressWarnings("serial")
public class Account extends AbstractSeparateINIFileEntity<Long, IUserData> implements EEPrincipal {
	// Byte sequence generated by http://www.random.org/
	// WARNING: Changing this will invalidate the keys of any existing accounts.
	public final static String AUTH_KEY = "key";
	public final static String AUTH_SALT = "key";
	// Byte sequence generated by http://www.random.org/
	// WARNING: Changing this will invalidate the keys of any existing accounts.
	public final static String serverSalt = "W7UDynoSUED5zbdA5ldiSlxV9DX0Fssl8VdhRUZWkG6D6XRGETXKRVdJMI2LAGvZyawgHkD26OIKDxz4"
			+ "xrWdol3RQp8JJ79lmCRQHfMBVa0jXyUaZSxq23lRNBjzMBKymxXmfZ9ugfuvIbV9NpF4b7K5GgACcWy7"
			+ "Xwz2P4wLYknUtIFLLZcQqFhlrcXRpsbtmc4JzKJqKPrsLlKby0PF3EGhSOLWfXO0bRrvpvXoxtuDnh2Z"
			+ "F6GUqW4X9JeFvMbLV8mcMm1i37SNPMwILzy1JqbYTeVtJLDozCVftVo4dBQJcgb9CMLGeCxO5DT2Xw5X"
			+ "gcyJgYXFFwRatjdPyLs4boM3aCTyWsNyNFfHArHati2mFGBS5CXqfazIhau6hyMlkxmGR3WUxioCpzq4"
			+ "H7q6usn8oSETobwEqsAqdVeMk06621glbeV9yofr7SapSTnp2xXSyklDcr5hOiEoFdCLkePQQoAEAtEx" + "jKLu0aTpKMRmysq5kTiS";

	public static String generateSalt(String in) {
		try {
			return DigestUtils.md5Hex((in + serverSalt + "\0").getBytes("ASCII"));
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	public static String hash(String text, String username) {
		return hash(text, username, AUTH_SALT);
	}

	public static String hash(String text, String username, boolean server) {
		return hash(text, username, AUTH_SALT, server);
	}

	public static String hash(String text, String username, String salt) {
		return hash(text, username, salt, false);
	}

	public static String hash(String text, String username, String salt, boolean server) {
		try {
			MessageDigest instance = MessageDigest.getInstance("MD5");
			byte[] hashedPw = instance.digest(text.getBytes("ASCII"));
			final String authString = username + ":" + encode(hashedPw) + ":" + salt;
			String encoded = encode(instance.digest(authString.getBytes("ASCII")));
			if (server) {
				instance.reset();
				instance.update(encoded.getBytes("ASCII"));
				instance.update(salt.getBytes("ASCII"));
				encoded = encode(instance.digest());
			}
			return encoded;
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	public static String md5(String text) {
		System.out.println("MD5: " + text);
		try {
			MessageDigest md = MessageDigest.getInstance("MD5");
			md.update(text.getBytes("ASCII"));
			return encode(md.digest());
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	private static String encode(byte[] bytes) {
		StringBuilder sb = new StringBuilder(bytes.length * 2);
		Formatter formatter = new Formatter(sb);
		try {
			for (byte b : bytes) {
				int val = b & 0xff;
				formatter.format("%02x", val);
			}
			return sb.toString();
		} finally {
			formatter.close();
		}
	}

	private List<Long> accountQuests = new ArrayList<Long>();
	private String auth = "";
	private List<Build> builds = new ArrayList<Build>();
	private List<Long> characters = new ArrayList<Long>();
	private int consecutiveDaysLoggedIn;
	private int credits;
	private int deliveryBoxSlots;
	private String groveName;
	private long lastLogOn;
	private long lastLogOnTime;
	private String name;
	private List<Permission> permissions = new ArrayList<Permission>();
	private Properties prefs = new Properties();
	private Map<String, String> recoveryKeys = new HashMap<String, String>();
	private String regKey;
	private long suspendDuration;
	private long suspendTime;

	public Account() {
		this(null);
	}

	public Account(IUserData database) {
		super(database);
	}

	public Account(IUserData database, Long id) {
		super(database, null, id);
	}

	public Account(IUserData database, String f) {
		super(database, f, null);
		setEntityId(Long.parseLong(FilenameUtils.getBaseName(f)));
	}

	public boolean checkPassword(String password) {
		String authHash = hash(password, name, AUTH_KEY);
		String saltedHash = generateSalt(authHash);
		return saltedHash.equals(auth);
	}

	public final List<Long> getAccountQuests() {
		return accountQuests;
	}

	public final String getAuth() {
		return auth;
	}

	public Build getBuild(long instanceId) {
		for (Build b : builds) {
			if (b.getEntityId().equals(instanceId)) {
				return b;
			}
		}
		return null;
	}

	public final List<Build> getBuilds() {
		return builds;
	}

	public final List<Long> getCharacters() {
		return characters;
	}

	public final int getConsecutiveDaysLoggedIn() {
		return consecutiveDaysLoggedIn;
	}

	public final int getCredits() {
		return credits;
	}

	public final int getDeliveryBoxSlots() {
		return deliveryBoxSlots;
	}

	public String getGroveName() {
		return groveName;
	}

	public final long getLastLogOn() {
		return lastLogOn;
	}

	public final long getLastLogOnTime() {
		return lastLogOnTime;
	}

	public String getName() {
		return name;
	}

	public final List<Permission> getPermissions() {
		return permissions;
	}

	public final Properties getPrefs() {
		return prefs;
	}

	public final Map<String, String> getRecoveryKeys() {
		return recoveryKeys;
	}

	public final String getRegKey() {
		return regKey;
	}

	public long getSuspendDuration() {
		return suspendDuration;
	}

	public String getSuspendInfo() {
		if (suspendDuration == 0) {
			return null;
		} else {
			final long expire = (suspendTime + suspendDuration) * 1000;
			if (System.currentTimeMillis() > expire) {
				return null;
			} else {
				return DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT).format(expire);
			}
		}
	}

	public long getSuspendTime() {
		return suspendTime;
	}

	public String hash(String text) {
		return hash(text, name);
	}

	public boolean isSuspended() {
		return suspendDuration == 0 || (System.currentTimeMillis() < ((suspendTime + suspendDuration) * 1000));
	}

	@Override
	public void set(String name, String value, String section) {
		if (section.equals("CHARACTERCACHE") || section.equals("CACHEENTRY")) {
			// Don't care, server will rebuild?
		} else {
			if (name.equals("ID")) {
				setEntityId(Long.valueOf(value));
			} else if (name.equals("Pref")) {
				int idx = value.indexOf(",");
				prefs.setProperty(value.substring(0, idx), value.substring(idx + 1));
			} else if (name.equals("Build")) {
				Build newBuild = new Build(getDatabase());
				StringTokenizer t = new StringTokenizer(value, ",");
				newBuild.setEntityId(Long.parseLong(t.nextToken()));
				newBuild.setBounds(new Rectangle(t));
				builds.add(newBuild);
			} else if (name.equals("Name")) {
				setName(value);
			} else if (name.equals("Auth")) {
				auth = value;
			} else if (name.equals("GroveName")) {
				groveName = value;
			} else if (name.equals("SuspendTime")) {
				suspendTime = Long.parseLong(value);
			} else if (name.equals("SuspendDuration")) {
				suspendDuration = Long.parseLong(value);
			} else if (name.equals("Characters")) {
				characters = new ArrayList<Long>();
				for (String id : Arrays.asList(value.split(","))) {
					if (!id.equals("")) {
						characters.add(Long.parseLong(id));
					}
				}
			} else if (name.equals("Permissions")) {
				for (String perm : Arrays.asList(value.split(","))) {
					Permission p = Permission.fromTextName(perm);
					if (p == null) {
						Log.error("Account", "Unknown permission '" + perm + "'");
					} else {
						if (permissions.contains(p))
							throw new IllegalArgumentException("Permission " + p + " is already added for " + getEntityId());
						permissions.add(p);
					}
				}
			} else if (name.equals("WebPermissions")) {
				for (String perm : Arrays.asList(value.split(","))) {
					Permission p = Permission.fromTextName(perm);
					if (p == null) {
						Log.error("Account", "Unknown web permission '" + perm + "'");
					} else {
						if (p.equals(Permission.ADMIN)) {
							permissions.add(p);
						}
					}
				}
			} else if (name.equals("RegKey")) {
				regKey = value;
			} else if (name.equals("RecoveryKeys")) {
				for (String s : value.split("&")) {
					int i = s.indexOf('=');
					String k = s;
					String v = null;
					if (i != -1) {
						k = s.substring(0, i);
						v = s.substring(i + 1);
					}
					recoveryKeys.put(k, v);
				}
			} else if (name.equals("LastLogOn")) {
				SimpleDateFormat df = new SimpleDateFormat("yyyy-mm-dd");
				try {
					lastLogOn = df.parse(value).getTime();
				} catch (ParseException e) {
					Log.error(getArtifactName(), "Failed to parse lastLogon  " + value, e);
				}
			} else if (name.equals("LastLogOnTime")) {
				try {
					lastLogOnTime = Long.parseLong(value);
				} catch (NumberFormatException e) {
					Log.error(getArtifactName(), "Failed to parse lastLogonTime  " + value, e);
				}
			} else if (name.equals("ConsecutiveDaysLoggedIn")) {
				consecutiveDaysLoggedIn = Integer.parseInt(value);
			} else if (name.equals("Credits")) {
				credits = Integer.parseInt(value);
			} else if (name.equals("DeliveryBoxSlots")) {
				deliveryBoxSlots = Integer.parseInt(value);
			} else if (name.equals("AccountQuest")) {
				accountQuests.add(Long.parseLong(value));
			} else if (!name.equals("")) {
				throw new IllegalArgumentException("Unhandled property " + name + " = " + value);
			}
		}
	}

	public final void setAuth(String auth) {
		if (this.auth == null || !this.auth.equals(auth)) {
			try {
				this.auth = hash(auth);
			} catch (Exception e) {
				throw new RuntimeException(e);
			}
		}
	}

	public final void setBuilds(List<Build> builds) {
		this.builds = builds;
	}

	public final void setCharacters(List<Long> characters) {
		this.characters = characters;
	}

	public final void setConsecutiveDaysLoggedIn(int consecutiveDaysLoggedIn) {
		this.consecutiveDaysLoggedIn = consecutiveDaysLoggedIn;
	}

	public final void setCredits(int credits) {
		this.credits = credits;
	}

	public final void setDeliveryBoxSlots(int deliveryBoxSlots) {
		this.deliveryBoxSlots = deliveryBoxSlots;
	}

	public void setGroveName(String groveName) {
		this.groveName = groveName;
	}

	public final void setLastLogOn(long lastLogOn) {
		this.lastLogOn = lastLogOn;
	}

	public final void setLastLogOnTime(long lastLogOnTime) {
		this.lastLogOnTime = lastLogOnTime;
	}

	public void setName(String username) {
		this.name = username;
	}

	public final void setPermissions(List<Permission> permissions) {
		this.permissions = permissions;
	}

	public final void setPrefs(Properties prefs) {
		this.prefs = prefs;
	}

	public final void setRegKey(String regKey) {
		this.regKey = regKey;
	}

	public void setSuspendDuration(long suspendDuration) {
		if (suspendDuration == 0) {
			suspendTime = 0;
			this.suspendDuration = 0;
		} else {
			if (suspendDuration != this.suspendDuration) {
				this.suspendDuration = suspendDuration;
				this.suspendTime = System.currentTimeMillis() / 1000;
			}
		}
	}

	public void setSuspendTime(long suspendTime) {
		this.suspendTime = suspendTime;
	}

	@Override
	public String toString() {
		return String.valueOf(getEntityId());
	}

	@Override
	public void write(INIWriter writer) {
		writer.println("[ENTRY]");
		writer.println("ID=" + getEntityId());
		writer.println("Name=" + name);
		writer.println("Auth=" + auth);
		if (characters.size() > 0) {
			writer.println("Characters=" + Util.toCommaSeparatedList(characters));
		}
		List<Permission> p = new ArrayList<Permission>(permissions);
		for (int i = p.size() - 1; i >= 0; i--) {
			if (p.get(i).name().startsWith("WEB_")) {
				p.remove(i);
			}
		}
		for (int i = 0; i < p.size(); i += 6) {
			writer.println("Permissions=" + Permission.toCommaSeparatedList(p.subList(i, Math.min(p.size(), i + 6))));
		}
		p = new ArrayList<Permission>(permissions);
		for (int i = p.size() - 1; i >= 0; i--) {
			if (!p.get(i).name().startsWith("WEB_")) {
				p.remove(i);
			}
		}
		for (int i = 0; i < p.size(); i += 6) {
			writer.println("WebPermissions=" + Permission.toCommaSeparatedList(p.subList(i, Math.min(p.size(), i + 6))));
		}
		if (Util.isNotNullOrEmpty(groveName)) {
			writer.println("GroveName=" + groveName);
		}
		for (Object key : prefs.keySet()) {
			writer.println("Pref=" + key.toString() + "," + prefs.getProperty((String) key));
		}
		for (Build build : builds) {
			build.write(writer);
		}
		if (suspendDuration > 0) {
			writer.println("SuspendDuration=" + suspendDuration);
		}
		if (suspendTime > 0) {
			writer.println("SuspendTime=" + suspendTime);
		}
		if (StringUtils.isNotBlank(regKey)) {
			writer.println("RegKey=" + regKey);
		}
		if (!recoveryKeys.isEmpty()) {
			writer.println("RecoveryKeys=" + Util.toSeparatedList(Util.toNameValueStringList(recoveryKeys), "&"));
		}
		if (lastLogOn > 0) {
			writer.println("LastLogOn=" + new SimpleDateFormat("yyyy-mm-dd").format(new Date(lastLogOn)));
		}
		if (lastLogOnTime > 0) {
			writer.println("LastLogOnTime=" + lastLogOnTime);
		}
		if (consecutiveDaysLoggedIn > 0)
			writer.println("ConsecutiveDaysLoggedIn=" + consecutiveDaysLoggedIn);
		if (credits > 0)
			writer.println("Credits=" + credits);
		if (deliveryBoxSlots > 0)
			writer.println("DeliveryBoxSlots=" + deliveryBoxSlots);
		for (Long a : accountQuests)
			writer.println("AccountQuest=" + a);
	}

	public static class Build extends AbstractEntity<Long, IUserData> {
		private Rectangle bounds = new Rectangle(0, 0, 3, 3);

		public Build() {
			this(null);
		}

		public Build(IUserData database) {
			this(database, null, new Rectangle(0, 0, 0, 0));
		}

		public Build(IUserData database, Long id, Rectangle bounds) {
			super(database, null, id);
			this.bounds = bounds;
		}

		public final Rectangle getBounds() {
			return bounds;
		}

		public final void setBounds(Rectangle bounds) {
			this.bounds = bounds;
		}

		@Override
		public String toString() {
			return String.valueOf(getEntityId());
		}

		public void write(PrintWriter writer) {
			writer.println("Build=" + getEntityId() + "," + bounds.toValueString());
		}

		@Override
		protected void doLoad() throws IOException {
		}
	}

	public enum Permission {
		ADMIN("admin", "Allow administration"), CREATE_PROP("CreateProp", "Create props"), DEBUG("debug", "Debug"), EDIT_PROP_OTHER(
				"EditPropOther", "Edit other props"), EDIT_PROP_SELF("EditPropSelf", "Edit own props"), EDIT_STAT("EditStat",
						"Edit stats"), FAST_LOAD("fastload", "Fast Load"), FORUM_ADMIN("forumadmin", "Forum admin"), FORUM_POST(
								"forumpost", "Forum post"), GM_CHAT("GmChat", "GM Chat Channel"), ITEM_GIVE("itemgive",
										"Give item"), PASSWORD_RESET("passwordreset", "Password Reset"), REGION_CHAT("RegionChat",
												"Speak on region chat"), SAGE("sage", "Sage"), SELF_DIAG("selfdiag",
														"Self Diag"), SYS_CHAT("SysChat", "System Chat Channel"), TWEAK_CLIENT(
																"tweakclient", "Creature Tweak (client side)"), TWEAK_NPC(
																		"TweakNPC", "Tweak NPC"), TWEAK_OTHER("TweakOther",
																				"Tweak Other Characters"), TWEAK_SELF("TweakSelf",
																						"Tweak Own Characters");
		public static Permission fromTextName(String textName) {
			for (Permission n : values()) {
				if (n.textName.equalsIgnoreCase(textName)) {
					return n;
				}
			}
			return null;
		}

		public static String toCommaSeparatedList(Collection<Permission> list) {
			StringBuilder bui = new StringBuilder();
			if (list != null) {
				for (Permission o : list) {
					if (bui.length() > 0) {
						bui.append(",");
					}
					bui.append(o.textName.toLowerCase());
				}
			}
			return bui.toString();
		}

		private final String english;
		private final String textName;

		private Permission(String textName, String english) {
			this.textName = textName;
			this.english = english;
		}

		@Override
		public String toString() {
			return english;
		}
	}
}
